CREATE OR REPLACE DIRECTORY XML_PATH AS 'C:/app/xml/';

----------XML EXPORT
CREATE OR REPLACE PROCEDURE EXPORT_USERS_TO_XML
IS
  DOC  DBMS_XMLDOM.DOMDocument;                                                                                        
  XDATA  XMLTYPE;                                                                                                                                                                                                                
  CURSOR XMLCUR IS                                                                                                     
    SELECT XMLELEMENT("USERS",    
      XMLAttributes('http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi"),
      XMLAGG(XMLELEMENT("USER",
        XMLELEMENT("USER_ID",U.USER_ID),
        XMLELEMENT("USERNAME",U.USERNAME),
        XMLELEMENT("PASSWORD_HASH",U.PASSWORD_HASH),
        XMLELEMENT("NAME",I.NAME),
        XMLELEMENT("GENDER",I.GENDER),
        XMLELEMENT("LOCATION",I.LOCATION),
        XMLELEMENT("BIRTHDAY",I.BIRTHDAY),
        XMLELEMENT("SUMMARY",I.SUMMARY),
        XMLELEMENT("EDUCATION",I.EDUCATION),
        XMLELEMENT("WORK",I.WORK),
        XMLELEMENT("RIGHT_ANSWERED",S.RIGHT_ANSWERED),
        XMLELEMENT("TOTAL_ANSWERED",S.TOTAL_ANSWERED),
        XMLELEMENT("AVG_SCORE",S.AVG_SCORE),
        XMLELEMENT("FINISHED_TESTS_COUNT",S.FINISHED_TESTS_COUNT),
        XMLELEMENT("PASSED_TESTS_COUNT",S.PASSED_TESTS_COUNT)
      ))                                                                                                                                   
)  FROM USERS_VIEW U LEFT JOIN INFO_VIEW I ON U.USER_ID = I.USER_ID LEFT JOIN USER_STATS S ON I.USER_ID = S.USER_ID; 
BEGIN
  OPEN XMLCUR;
    LOOP 
      FETCH XMLCUR INTO XDATA;                                                                                             
    EXIT WHEN XMLCUR%NOTFOUND;
    END LOOP;
  CLOSE XMLCUR;                                                                                                        
  DOC := DBMS_XMLDOM.NewDOMDocument(XDATA);                                                                            
  DBMS_XMLDOM.WRITETOFILE(DOC, 'XML_PATH/users.xml');
END;

BEGIN
  EXPORT_USERS_TO_XML();
END;


----------XML IMPORT
CREATE OR REPLACE PROCEDURE IMPORT_USERS_FROM_XML
IS
  L_CLOB CLOB;
  L_BFILE BFILE := BFILENAME('XML_PATH', 'users.xml');
  
  L_DEST_OFFSET   INTEGER := 1;
  L_SRC_OFFSET    INTEGER := 1;
  L_BFILE_CSID    NUMBER  := 0;
  L_LANG_CONTEXT  INTEGER := 0;
  L_WARNING       INTEGER := 0;
  
  P                DBMS_XMLPARSER.PARSER;
  V_DOC            DBMS_XMLDOM.DOMDOCUMENT;
  V_ROOT_ELEMENT   DBMS_XMLDOM.DOMELEMENT;
  V_CHILD_NODES    DBMS_XMLDOM.DOMNODELIST;
  V_CURRENT_NODE   DBMS_XMLDOM.DOMNODE;
   
  U USERS_VIEW%ROWTYPE;
  INF INFO_VIEW%ROWTYPE;
  S USER_STATS%ROWTYPE;
BEGIN
  DBMS_LOB.CREATETEMPORARY (L_CLOB, TRUE);
  DBMS_LOB.FILEOPEN(L_BFILE, DBMS_LOB.FILE_READONLY);
  
  DBMS_LOB.LOADCLOBFROMFILE (DEST_LOB => L_CLOB, SRC_BFILE => L_BFILE, AMOUNT => DBMS_LOB.LOBMAXSIZE,
    DEST_OFFSET => L_DEST_OFFSET, SRC_OFFSET => L_SRC_OFFSET, BFILE_CSID => L_BFILE_CSID,
    LANG_CONTEXT => L_LANG_CONTEXT, WARNING => L_WARNING);
  DBMS_LOB.FILECLOSE(L_BFILE);
  COMMIT;
    -- Create XML Parser.
   P := DBMS_XMLPARSER.NEWPARSER;
   -- Parse XML into DOM object                        
   DBMS_XMLPARSER.PARSECLOB(P,L_CLOB);
   -- Document Element              
   V_DOC := DBMS_XMLPARSER.GETDOCUMENT(P);
   -- Root element (<USERS>)
   V_ROOT_ELEMENT := DBMS_XMLDOM.Getdocumentelement(v_Doc);
   --- return Dbms_Xmldom.Domnodelist
   V_CHILD_NODES := DBMS_XMLDOM.GETCHILDRENBYTAGNAME(V_ROOT_ELEMENT,'*');
  
   FOR i IN 0 .. DBMS_XMLDOM.GETLENGTH(V_CHILD_NODES) - 1
   LOOP
      -- <USER> Node.
      V_CURRENT_NODE := DBMS_XMLDOM.ITEM(V_CHILD_NODES,i);
      
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'USER_ID/text()',U.USER_ID);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'USERNAME/text()',U.USERNAME);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'PASSWORD_HASH/text()',U.PASSWORD_HASH);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'NAME/text()',INF.NAME);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'GENDER/text()',INF.GENDER);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'LOCATION/text()',INF.LOCATION);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'BIRTHDAY/text()',INF.BIRTHDAY);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'SUMMARY/text()',INF.SUMMARY);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'EDUCATION/text()',INF.EDUCATION);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'WORK/text()',INF.WORK);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'RIGHT_ANSWERED/text()',S.RIGHT_ANSWERED);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'TOTAL_ANSWERED/text()',S.TOTAL_ANSWERED);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'AVG_SCORE/text()',S.AVG_SCORE);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'FINISHED_TESTS_COUNT/text()',S.FINISHED_TESTS_COUNT);
      DBMS_XSLPROCESSOR.VALUEOF(V_CURRENT_NODE, 'PASSED_TESTS_COUNT/text()',S.PASSED_TESTS_COUNT);
      
      INSERT INTO USERS(USERNAME,PASSWORD_HASH) 
        VALUES( U.USERNAME,U.PASSWORD_HASH);
      INSERT INTO USER_INFO(USER_ID, NAME,GENDER,LOCATION,BIRTHDAY,SUMMARY,EDUCATION,WORK) 
        VALUES(bluefox_admin.Users_seq.CURRVAL,INF.NAME,INF.GENDER,INF.LOCATION,INF.BIRTHDAY,INF.SUMMARY,INF.EDUCATION,INF.WORK);
      INSERT INTO USER_STATS(USER_ID, RIGHT_ANSWERED,TOTAL_ANSWERED,AVG_SCORE,FINISHED_TESTS_COUNT,PASSED_TESTS_COUNT) 
        VALUES(bluefox_admin.Users_seq.CURRVAL,S.RIGHT_ANSWERED,S.TOTAL_ANSWERED,S.AVG_SCORE,S.FINISHED_TESTS_COUNT,S.PASSED_TESTS_COUNT);
   END LOOP;
  
  DBMS_LOB.FREETEMPORARY(L_CLOB);
  DBMS_XMLPARSER.FREEPARSER(P);
  DBMS_XMLDOM.FREEDOCUMENT(V_DOC);
  COMMIT;
END ;

BEGIN
  IMPORT_USERS_FROM_XML();
END;

-------------------------
SELECT * FROM USERS_VIEW;
SELECT * FROM INFO_VIEW;
SELECT * FROM STATS_VIEW;